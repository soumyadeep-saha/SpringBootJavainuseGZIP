SpringBootJavainuseFileDownload

The Controller return type is of type void and add HttpServletResponse as an argument to the method.
In a regular HTTP response, the Content-Disposition response header is a header indicating if the content is expected to be displayed inline in the browser, that is, as a Web page or as part of a Web page, or as an attachment, that is downloaded and saved locally. Set the Content-Disposition accordingly.
Find the MIME Type of the file to be downloaded. This can be application/pdf, text/html,application/xml etc.
If the mimetype is of unknown type, then it is set to application/octet-stream. In this case the browser displays the Save As
Copy bytes to the response OutputStream from the InputStream.

Add dependency
spring-boot-starter-web

Create main class

Crete controller FileDownloadController
@RestController
@RequestMapping("/download")
public class FileDownloadController {

	private static final String EXTERNAL_FILE_PATH = "C:\\Users\\sousaha\\Desktop\\testFileDownload\\";

	@RequestMapping("/file/{fileName:.+}")
	public void downloadPDFResource(HttpServletRequest request, HttpServletResponse response,
			@PathVariable("fileName") String fileName) throws IOException {

			//HttpServletResponse in general tells us that we are going to return a file instead of displaying it
		File file = new File(EXTERNAL_FILE_PATH + fileName);
		if (file.exists()) {
			// check if file exists
			//get the mimetype, known mime type jpeg, pdf
			String mimeType = URLConnection.guessContentTypeFromName(file.getName());
			if (mimeType == null) {
				//unknown mimetype so set the mimetype to application/octet-stream
				mimeType = "application/octet-stream";
				//octet-stream give options for saveAs
			}

			response.setContentType(mimeType);

			/**
			 * In a regular HTTP response, the Content-Disposition response header is a
			 * header indicating if the content is expected to be displayed inline in the
			 * browser, that is, as a Web page or as part of a Web page, or as an
			 * attachment, that is downloaded and saved locally.
			 * 
			 */

			/**
			 * Here we have mentioned it to show inline
			 */
			response.setHeader("Content-Disposition", String.format("inline; filename=\"" + file.getName() + "\""));

			 //Here we have mentioned it to show as attachment
			 //response.setHeader("Content-Disposition", String.format("attachment; filename=\"" + file.getName() + "\""));

			response.setContentLength((int) file.length());
			//setContentLength notifies the use the length to be downloaded and how much is downloaded

			InputStream inputStream = new BufferedInputStream(new FileInputStream(file));
			//InputStream reads the content of the file
			
			FileCopyUtils.copy(inputStream, response.getOutputStream());
			//copy bytes to the response outputStream from the inputStream
		}
	}
}



 
 

 

 
Spring Boot File Download - Hello World Example
In this example we will learn how to to download a file using Spring Boot Application. To do so we will define a Controller having the following -
The Controller return type is of type void and add HttpServletResponse as an argument to the method.
In a regular HTTP response, the Content-Disposition response header is a header indicating if the content is expected to be displayed inline in the browser, that is, as a Web page or as part of a Web page, or as an attachment, that is downloaded and saved locally. Set the Content-Disposition accordingly.
Find the MIME Type of the file to be downloaded. This can be application/pdf, text/html,application/xml etc.
If the mimetype is of unknown type, then it is set to application/octet-stream. In this case the browser displays the Save As
Copy bytes to the response OutputStream from the InputStream.
Video

This tutorial is explained in the below Youtube Video.


Lets Begin-

Create the Maven Project as follows -
The pom.xml will be as follows -
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.javainuse</groupId>
	<artifactId>boot-filedownload</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.4.1.RELEASE</version>
		<relativePath />
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

	</dependencies>
</project>

 
Create the Bootstrap class as follows -
package com.javainuse;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SpringBootFileDownoad {

	public static void main(String[] args) {
		SpringApplication.run(SpringBootFileDownoad.class, args);
	}

}
Next define the controller for downloading the file -
package com.javainuse.controller;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URLConnection;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/download")
public class FileDownloadController {

	private static final String EXTERNAL_FILE_PATH = "C:/fileDownloadExample/";

	@RequestMapping("/file/{fileName:.+}")
	public void downloadPDFResource(HttpServletRequest request, HttpServletResponse response,
			@PathVariable("fileName") String fileName) throws IOException {

		File file = new File(EXTERNAL_FILE_PATH + fileName);
		if (file.exists()) {

			//get the mimetype
			String mimeType = URLConnection.guessContentTypeFromName(file.getName());
			if (mimeType == null) {
				//unknown mimetype so set the mimetype to application/octet-stream
				mimeType = "application/octet-stream";
			}

			response.setContentType(mimeType);

			/**
			 * In a regular HTTP response, the Content-Disposition response header is a
			 * header indicating if the content is expected to be displayed inline in the
			 * browser, that is, as a Web page or as part of a Web page, or as an
			 * attachment, that is downloaded and saved locally.
			 * 
			 */

			/**
			 * Here we have mentioned it to show inline
			 */
			response.setHeader("Content-Disposition", String.format("inline; filename=\"" + file.getName() + "\""));

			 //Here we have mentioned it to show as attachment
			 //response.setHeader("Content-Disposition", String.format("attachment; filename=\"" + file.getName() + "\""));

			response.setContentLength((int) file.length());

			InputStream inputStream = new BufferedInputStream(new FileInputStream(file));

			FileCopyUtils.copy(inputStream, response.getOutputStream());

		}
	}
}
Start the application -
Go to http://localhost:8080/download/file/soa.pdf

 
Go to http://localhost:8080/download/file/soa.abc
Since the from file name we get some unknown mime type, so we get the Save As window and content is not shown inline by the browser.
In the above FileDownloadController set the Content-Disposition as attachment and again go to the url http://localhost:8080/download/file/soa.pdf
So our application is now working good.
Download Source Code
Download it -
Spring Boot File Download Example